{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "brand-sidebar",
  "type": "registry:component",
  "title": "Brand Sidebar",
  "description": "A styled, simple, reusable sidebar",
  "registryDependencies": [
    "badge",
    "button",
    "sidebar",
    "https://sap-design-registry.vercel.app/r/sonner.json",
    "https://sap-design-registry.vercel.app/r/theme.json"
  ],
  "files": [
    {
      "path": "src/components/brand-sidebar.tsx",
      "content": "\"use client\";\n\nimport {\n  AlertTriangle,\n  BarChart2,\n  Clock,\n  Database,\n  Home,\n  LayoutGrid,\n  MessageSquareText,\n  MoreHorizontal,\n  Plus,\n  Table,\n} from \"lucide-react\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport type * as React from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarSeparator,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\n\ninterface NavItem {\n  title: string;\n  href: string;\n  icon: React.ReactNode;\n  badge?: {\n    text: string;\n  };\n}\n\ninterface SidebarProps {\n  collapsed?: boolean;\n  onToggle?: () => void;\n  className?: string;\n}\n\nexport function BrandSidebar({\n  collapsed = false,\n  onToggle,\n  className,\n}: SidebarProps) {\n  const pathname = usePathname();\n  const { state } = useSidebar();\n  const isCollapsed = state === \"collapsed\";\n\n  const mainNavItems: NavItem[] = [\n    {\n      title: \"Home\",\n      href: \"#\",\n      icon: <Home className=\"size-4\" />,\n    },\n    {\n      title: \"Projects\",\n      href: \"#projects\",\n      icon: <LayoutGrid className=\"size-4\" />,\n    },\n    {\n      title: \"Databases\",\n      href: \"#databases\",\n      icon: <Database className=\"size-4\" />,\n    },\n    {\n      title: \"Tables\",\n      href: \"#tables\",\n      icon: <Table className=\"size-4\" />,\n      badge: {\n        text: \"Beta\",\n      },\n    },\n    {\n      title: \"AI\",\n      href: \"#ai\",\n      icon: <MessageSquareText className=\"size-4\" />,\n      badge: {\n        text: \"Alpha\",\n      },\n    },\n  ];\n\n  const toolsNavItems: NavItem[] = [\n    {\n      title: \"Alerts\",\n      href: \"#alerts\",\n      icon: <AlertTriangle className=\"size-4\" />,\n    },\n    {\n      title: \"Analytics\",\n      href: \"#analytics\",\n      icon: <BarChart2 className=\"size-4\" />,\n    },\n    {\n      title: \"History\",\n      href: \"#history\",\n      icon: <Clock className=\"size-4\" />,\n    },\n    {\n      title: \"More\",\n      href: \"#more\",\n      icon: <MoreHorizontal className=\"size-4\" />,\n    },\n  ];\n\n  return (\n    <Sidebar variant=\"sidebar\" collapsible=\"icon\" className=\"mt-16\">\n      <SidebarHeader>\n        <div className={cn(isCollapsed ? \"py-2\" : \"p-2\")}>\n          <Button className={cn(isCollapsed ? \"h-8 w-8 p-0\" : \"w-full\")}>\n            <Plus className={cn(\"size-4\", !isCollapsed && \"mr-1\")} />\n            {!isCollapsed && <span>Create</span>}\n          </Button>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        {/* Main Nav Items */}\n        <SidebarGroup>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {mainNavItems.map((item) => (\n                <SidebarMenuItem key={item.href}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={\n                      pathname === item.href ||\n                      (pathname === \"\" && item.href === \"/\")\n                    }\n                    tooltip={item.title}\n                  >\n                    <Link href={item.href}>\n                      {item.icon}\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                  {item.badge && (\n                    <SidebarMenuBadge>{item.badge.text}</SidebarMenuBadge>\n                  )}\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarSeparator />\n\n        {/* Tools Nav Items */}\n        <SidebarGroup>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {toolsNavItems.map((item) => (\n                <SidebarMenuItem key={item.href}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={pathname === item.href}\n                    tooltip={item.title}\n                  >\n                    <Link href={item.href}>\n                      {item.icon}\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                  {item.badge && (\n                    <SidebarMenuBadge>{item.badge.text}</SidebarMenuBadge>\n                  )}\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/v0/shell-layout.tsx",
      "content": "import { type ReactNode } from \"react\";\n\nimport { BrandHeader } from \"@/components/brand-header\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport \"@/app/globals.css\";\nimport \"@/app/tokens.css\";\n\nexport default function ShellLayout({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n  return (\n    <html\n      lang=\"en\"\n      className={cn(\"font-sans bg-background text-foreground\")}\n    >\n      <body>\n        <BrandHeader />\n        <main className=\"mt-16 flex w-full justify-center\">\n          <div className=\"container\">{children}</div>\n        </main>\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/layout.tsx"
    },
    {
      "path": "src/app/demo/[name]/blocks/blank-page.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  MessageBox,\n  type MessageBoxAction,\n  type MessageBoxType,\n} from \"../../../../components/message-box\";\n\nexport default function MessageBoxDemo() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messageBoxType, setMessageBoxType] =\n    useState<MessageBoxType>(\"Confirm\");\n  const [lastAction, setLastAction] = useState<MessageBoxAction | null>(null);\n\n  const handleAction = (action: MessageBoxAction) => {\n    setLastAction(action);\n    console.log(\"[v0] MessageBox action:\", action);\n  };\n\n  const showConfirmation = () => {\n    setMessageBoxType(\"Confirm\");\n    setIsOpen(true);\n  };\n\n  const showInformation = () => {\n    setMessageBoxType(\"Information\");\n    setIsOpen(true);\n  };\n\n  const showSuccess = () => {\n    setMessageBoxType(\"Success\");\n    setIsOpen(true);\n  };\n\n  const showWarning = () => {\n    setMessageBoxType(\"Warning\");\n    setIsOpen(true);\n  };\n\n  const showError = () => {\n    setMessageBoxType(\"Error\");\n    setIsOpen(true);\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center gap-6 py-12\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-3xl font-bold\">MessageBox Component Demo</h1>\n        <p className=\"text-muted-foreground\">\n          UI5-compatible MessageBox built with shadcn/ui and Tailwind CSS\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n        <Button onClick={showConfirmation} variant=\"default\">\n          Show Confirmation\n        </Button>\n        <Button onClick={showInformation} variant=\"secondary\">\n          Show Information\n        </Button>\n        <Button onClick={showSuccess} variant=\"outline\">\n          Show Success\n        </Button>\n        <Button onClick={showWarning} variant=\"outline\">\n          Show Warning\n        </Button>\n        <Button onClick={showError} variant=\"destructive\">\n          Show Error\n        </Button>\n      </div>\n\n      {lastAction && (\n        <div className=\"text-center p-4 bg-muted rounded-lg\">\n          <p className=\"text-sm text-muted-foreground\">Last action:</p>\n          <p className=\"font-semibold\">{lastAction}</p>\n        </div>\n      )}\n\n      <MessageBox\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        type={messageBoxType}\n        title={\n          messageBoxType === \"Confirm\"\n            ? \"BestÃ¤tigung\"\n            : messageBoxType === \"Information\"\n            ? \"Information\"\n            : messageBoxType === \"Success\"\n            ? \"Success\"\n            : messageBoxType === \"Warning\"\n            ? \"Warning\"\n            : \"Error\"\n        }\n        onAction={handleAction}\n        emphasizedAction=\"OK\"\n      >\n        {messageBoxType === \"Confirm\" &&\n          'You can close the MessageBox by pressing \"Escape\" or selecting one of the footer buttons.'}\n        {messageBoxType === \"Information\" &&\n          \"This is an informational message to provide you with important details.\"}\n        {messageBoxType === \"Success\" &&\n          \"The operation completed successfully!\"}\n        {messageBoxType === \"Warning\" &&\n          \"Please review your input before proceeding.\"}\n        {messageBoxType === \"Error\" &&\n          \"An error occurred while processing your request.\"}\n      </MessageBox>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    }
  ]
}